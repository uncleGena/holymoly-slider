!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.hmSlider=e():t.hmSlider=e()}(window,function(){return function(t){var e={};function i(s){if(e[s])return e[s].exports;var r=e[s]={i:s,l:!1,exports:{}};return t[s].call(r.exports,r,r.exports,i),r.l=!0,r.exports}return i.m=t,i.c=e,i.d=function(t,e,s){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:s})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)i.d(s,r,function(e){return t[e]}.bind(null,r));return s},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="/dist/",i(i.s=0)}({0:function(t,e,i){"use strict";i.r(e);i(5);class s{constructor({dataName:t="hmSliderMin",dataValue:e,cssName:i,opositeCssName:s,element:r,sliderWidth:a,minMaxDiapazon:n,onStart:h=(()=>{}),onChangeStart:o=(()=>{}),onChange:d=(()=>{}),onChangeEnd:l=(()=>{}),updateIndicator:u=(()=>{}),step:g=null,formatNumber:c=!1,sign:m=!1}){this.dataName=t,this.dataValue=e,this.cssName=i,this.opositeCssName=s,this.triggerElem=r,this.sliderWidth=a,this.minMaxDiapazon=n,this.onStart=h,this.onChangeStart=o,this.onChange=d,this.onChangeEnd=l,this.step=g||n,this.updateIndicator=u,this.formatNumber=c,this.sign=m,this.triggerMinInit=parseInt(window.getComputedStyle(this.triggerElem)[i]),this.triggerMin=this.triggerMinInit,this.triggerElemWidth=parseInt(window.getComputedStyle(this.triggerElem).width),this.highlighted=this.triggerElem.classList.contains("trigger-active"),this.isTouchDevice=!1,this.clickCoord=null,this.moveValOld=null,this.cutSign=this.triggerElem.dataset.hmSliderCutSign||!1,this.inMoveState=!1,this.currentPixelVal=this.triggerMinInit,this.currentVisualVal=e,this.anotherTriggerWidth=null,this.anotherTriggerValue=null,this.onStart(this.dataToReturn()),this.triggerElem.addEventListener("mousedown",t=>{this.isTouchDevice=!1,this.eventStart(t)}),this.triggerElem.addEventListener("touchstart",t=>{this.isTouchDevice=!0,this.eventStart(t)}),document.addEventListener("mouseup",this.eventStop.bind(this)),document.addEventListener("touchend",this.eventStop.bind(this)),document.addEventListener("mousemove",this.eventMove.bind(this)),document.addEventListener("touchmove",this.eventMove.bind(this));const p=this.getVisualValueWithCutSign();this.updateVisualValue(p)}get sliderWidth(){return this.$sliderWidth}set sliderWidth(t){this.$sliderWidth=t,t<this.currentPixelVal&&(this.applyTriggerPosition(t-this.triggerElemWidth-this.anotherTriggerWidth),console.warn("Trigger moved outside of slider"))}get active(){return this.$active}set active(t){this.$active=t,this.toggleHighlightClass(this.active,this.isMoved())}get currentPixelVal(){return this.$currentPixelVal}set currentPixelVal(t){this.$currentPixelVal=t,this.applyTriggerPosition(t)}updateCurrentState(t){const e=this.triggerElemMaxAllow(),i=this.getExactMovedValue(this.triggerMinInit,t,e),s=this.sliderWidth-this.triggerElemWidth-this.anotherTriggerWidth;this.currentStep=this.getCurrentStep(i,this.step,s),this.currentPixelVal=this.getMagneticMovedValue(i,this.step,s),this.currentVisualVal=this.getVisualValue(this.minMaxDiapazon,this.step,this.currentStep)}resetToInitial(){return this.updateCurrentState(0),this.updateVisualValue(this.getVisualValueWithCutSign()),this.updateIndicator(this.dataToReturn()),this.eventStop(),new Promise(t=>{setTimeout(()=>{t(this.dataToReturn())},500)})}isMoved(){return this.currentPixelVal!==this.triggerMinInit}addHighlightedClass(){this.highlighted=!0,this.triggerElem.classList.add("trigger-highlighted")}removeHighlightedClass(){this.highlighted=!1,this.triggerElem.classList.remove("trigger-highlighted")}toggleHighlightClass(t,e){t||e?this.addHighlightedClass():this.removeHighlightedClass()}eventStart(t){this.clickCoord=this.evPageX(t,this.isTouchDevice),this.active=!0}eventStop(){this.active=!1;const t=this.triggerElem.style[this.cssName];this.triggerMin=parseInt(""===t?0:t),this.inMoveState=!1}get inMoveState(){return this.$inMoveState}set inMoveState(t){t&&this.$inMoveState!==t?this.onChangeStart(this.dataToReturn()):t||this.$inMoveState===t||void 0===this.$inMoveState||this.onChangeEnd(this.dataToReturn()),this.$inMoveState=t}eventMove(t){this.active&&this.moveTrigger(t)}evPageX(t,e){return e?t.changedTouches[0].clientX:t.clientX}movedCursorValue(t,e){return"left"===this.cssName?this.evPageX(t,this.isTouchDevice)-e:"right"===this.cssName?e-this.evPageX(t,this.isTouchDevice):void 0}getExactMovedValue(t,e,i){return e<=i?e>=t?e:t:i}getCurrentStep(t,e,i){return parseInt((t/(i/e)).toFixed(0))}getMagneticMovedValue(t,e,i){const s=i/e;return parseInt((t/s).toFixed(0))*s}getMinMaxCurrentStep(t,e,i,s){if("hmSliderMin"===this.dataName){return t-(e-i)*s+this.dataValue}if("hmSliderMax"===this.dataName){return t-i*s+(this.dataValue-t)}}getVisualValue(t,e,i){const s=t/parseInt(e);return this.getMinMaxCurrentStep(t,e,i,s)}updateVisualValue(t){this.triggerElem.innerHTML=t}triggerElemMaxAllow(){return this.sliderWidth-this.triggerElemWidth-this.anotherTriggerWidth-this.anotherTriggerValue}cutSignAddition(t,e,i,s=null){return t||(e&&i===s?e:"")}valueFormated(t){return t>9999999?(t/1e6).toFixed(0)+"m":t>999999?(t/1e6).toFixed(1)+"m":t>99999?(t/1e3).toFixed(0)+"k":t>9999?(t/1e3).toFixed(0)+"k":t>999?parseFloat((t/1e3).toFixed(1))+"k":t>99?t.toFixed(0):t>=10?t.toFixed(0):t>=1?t.toFixed(1):t>0?t.toFixed(2):0===t?t.toFixed(0):t}getVisualValueWithCutSign(){return(this.formatNumber?this.valueFormated(this.currentVisualVal):this.currentVisualVal.toFixed(0))+this.cutSignAddition(this.sign,this.cutSign,this.currentVisualVal,this.dataValue)}dataToReturn(){return{data:{cssName:this.cssName,opositeCssName:this.opositeCssName,value:this.currentVisualVal},ui:{width:this.triggerElemWidth,value:this.currentPixelVal}}}moveTrigger(t){const e=this.triggerMin+this.movedCursorValue(t,this.clickCoord);if(this.updateCurrentState(e),this.moveValOld!==this.currentPixelVal){this.inMoveState=!0,this.updateIndicator(this.dataToReturn());const e=this.dataToReturn();e.ev=t,this.onChange(e),this.updateVisualValue(this.getVisualValueWithCutSign()),this.moveValOld=this.currentPixelVal,this.applyTriggerPosition(this.currentPixelVal)}}applyTriggerPosition(t){this.triggerElem.style[this.cssName]=t+"px"}}class r{constructor({baseElement:t,side:e}){this.indicator=t.querySelector("[data-indicator]"),this.side=e,this.valueInit=parseInt(window.getComputedStyle(this.indicator)[e]),this.valueCurr=this.valueInit}get valueCurr(){return this.$valueCurr}set valueCurr(t){this.$valueCurr=t,this.indicator.style[this.side]=t+"px"}}class a{constructor({selector:t,formatNumber:e=!0,onInit:i=(()=>{}),onChangeStart:a=(()=>{}),onChange:n=(()=>{}),onChangeEnd:h=(()=>{})}={}){let o;this.selector=t,this.formatNumber=e,this.onInit=i,this.onChangeStart=a,this.onChange=n,this.onChangeEnd=h,this.triggersConfig=[{cssName:"left",opositeCssName:"right",dataName:"hmSliderMin"},{cssName:"right",opositeCssName:"left",dataName:"hmSliderMax"}],this.sliderStepName="hmSliderStep","string"==typeof t?this.sliderElem=document.querySelector(t):t instanceof HTMLElement?this.sliderElem=t:console.warn("Selector of slider should be string or HTMLElement"),this.dataSet=this.sliderElem.dataset,this.minMaxDiapazon=this.dataSet[this.triggersConfig[1].dataName]-this.dataSet[this.triggersConfig[0].dataName],this.step=parseInt(this.dataSet[this.sliderStepName]),this.triggers=this.triggersConfig.map(t=>new s(this.triggerPropsConfig(t))),this.indicatorSides=this.triggersConfig.map(t=>new r({baseElement:this.sliderElem,side:t.cssName})),this.sliderWidth=this.sliderElem.offsetWidth,window.addEventListener("resize",()=>{clearTimeout(o),o=setTimeout(()=>{this.sliderWidth=this.sliderElem.offsetWidth},50)},!1),this.onInit()}triggerPropsConfig(t){const{cssName:e,opositeCssName:i,dataName:s}=t;return{dataName:s,dataValue:parseInt(this.dataSet[s]),minMaxDiapazon:this.minMaxDiapazon,cssName:e,opositeCssName:i,element:this.sliderElem.querySelector(`[data-trigger="${e}"]`),sliderWidth:this.sliderWidth,step:this.step,formatNumber:this.formatNumber,sign:this.dataSet.hmSliderSign||!1,onStart:t=>{setTimeout(()=>{this.changeOppositeTriggerWidth(t.data,t.ui)})},onChangeStart:t=>{this.onChangeStart&&this.onChangeStart(this.returnDataSetup(t))},onChange:t=>{this.changeOppositeTriggerWidth(t.data,t.ui),this.onChange&&this.onChange(this.returnDataSetup(t))},onChangeEnd:t=>{this.onChangeEnd&&this.onChangeEnd(this.returnDataSetup(t))},updateIndicator:t=>{this.changeIndicatorSideValue(t.data,t.ui)}}}getActiveTriggerInd(t){return this.triggers.reduce((e,i,s)=>(i.cssName===t&&(e=s),e),-1)}returnDataSetup(t=!1){const e={slider:{dataSet:this.dataSet,elem:this.sliderElem},triggers:this.triggers.map(t=>({elem:t.triggerElem,cssName:t.cssName,dataName:t.dataName,initVal:t.dataValue,currVal:t.currentVisualVal,highlighted:t.highlighted}))};return t&&(e.activeTriggerInd=this.getActiveTriggerInd(t.data.cssName)),e}changeOppositeTriggerWidth(t,e){this.triggers.forEach(i=>{i.cssName===t.opositeCssName&&(i.anotherTriggerWidth=e.width,i.anotherTriggerValue=e.value)})}changeIndicatorSideValue(t,e){this.indicatorSides.forEach(i=>{i.side===t.cssName&&(i.valueCurr=e.value+e.width)})}get sliderWidth(){return this.$sliderWidth}set sliderWidth(t){this.$sliderWidth=t,this.updateTriggersSliderWidth(t)}updateTriggersSliderWidth(t){this.triggers.forEach(e=>{e.sliderWidth=t})}command(...t){if("reset"===t[0])return this.resetSlider()}resetSlider(){const t=this.triggers.map(t=>t.resetToInitial());return new Promise(e=>{Promise.all(t).then(t=>{e(this.returnDataSetup())})})}}function n(t){return new a(t)}i.d(e,"hmSlider",function(){return n})},5:function(t,e){}}).hmSlider});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,